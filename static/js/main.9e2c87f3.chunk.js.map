{"version":3,"sources":["components/link-tree/link-button/index.js","contants.js","components/link-tree/index.js","App.js","serviceWorker.js","index.js"],"names":["LinkButton","props","href","link","target","rel","text","LINKS","LinkTree","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAUeA,MARf,SAAoBC,GAClB,OACE,uBAAGC,KAAMD,EAAME,KAAMC,OAAO,SAASC,IAAI,uBACrC,gCAASJ,EAAMK,QCLVC,EACO,0DADPA,EAEW,mDAFXA,EAIa,2DAJbA,EAKY,iDALZA,EAMH,8BANGA,EAOE,4CAPFA,EAQA,oCARAA,EASC,6CATDA,EAUK,8CAVLA,EAWM,8CAXNA,EAYM,kCAZNA,EAaD,mCAbCA,EAcC,2B,KC6BCC,MApCf,WACI,OACI,yBAAKC,UAJM,aAKP,yBAAKA,UAAS,UALP,YAKO,eACV,yBAAKA,UAAS,UANX,YAMW,YACd,uBAAGA,UAAU,SAAb,yBACA,kBAAC,EAAD,CAAYN,KAAMI,EAAsBD,KAAI,wCAC5C,kBAAC,EAAD,CAAYH,KAAMI,EAA0BD,KAAI,kCAChD,6BACA,kBAAC,EAAD,CAAYH,KAAMI,EAAgBD,KAAI,iBACtC,6CACA,yBAAKG,UAAU,kBACX,kBAAC,EAAD,CAAYN,KAAMI,EAAoBD,KAAI,mDAC1C,kBAAC,EAAD,CAAYH,KAAMI,EAAqBD,KAAI,kDAC3C,kBAAC,EAAD,CAAYH,KAAMI,EAAqBD,KAAI,mCAE/C,uCACA,yBAAKG,UAAU,kBACX,kBAAC,EAAD,CAAYN,KAAMI,EAA2BD,KAAM,sBACnD,kBAAC,EAAD,CAAYH,KAAMI,EAA4BD,KAAM,wBAExD,wCACA,kBAAC,EAAD,CAAYH,KAAMI,EAAcD,KAAM,WACtC,6CACA,kBAAC,EAAD,CAAYH,KAAMI,EAAYD,KAAM,mBACpC,uCACA,yBAAKG,UAAU,kBACX,kBAAC,EAAD,CAAYN,KAAMI,EAAiBD,KAAM,cACzC,kBAAC,EAAD,CAAYH,KAAMI,EAAeD,KAAM,YACvC,kBAAC,EAAD,CAAYH,KAAMI,EAAgBD,KAAM,iB,MCxB7CI,MARf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e2c87f3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction LinkButton(props) {\n  return (\n    <a href={props.link} target='_blank' rel=\"noopener noreferrer\">\n        <button>{props.text}</button>\n    </a>\n  );\n}\n\nexport default LinkButton;\n","export const LINKS = {\n    MOCK_INTERVIEW: 'https://calendly.com/kodeably/mock-behavioral-interview',\n    MENTORSHIP_SESSION: 'https://calendly.com/kodeably/mentorship-session',\n    FREE_INTERVIEW: 'https://docs.google.com/forms/d/e/1FAIpQLSe-ioQYsCo4JuqxzTCXaUkAO5AbWeQyf2M_eV9UC9Ip5k0EWg/viewform?usp=sf_link',\n    CODING_WITH_CHANDLER: 'https://www.youtube.com/channel/UCkeSKp49ycaZRlGKkCRRi1g',\n    CHANDLER_KNOWS_BEST: 'https://www.youtube.com/user/ChandlerKnowsBest',\n    BLOG: 'https://thinkwithcolor.com/',\n    INSTAGRAM: 'https://www.instagram.com/chandler.keyes/',\n    TWITTER: 'https://twitter.com/chandlerkeyes',\n    LINKEDIN: 'https://www.linkedin.com/in/chandlerkeyes/',\n    LATEST_VIDEO: 'https://www.youtube.com/watch?v=8HtgehWoOu0',\n    LATEST_VIDEO2: 'https://www.youtube.com/watch?v=tk1H5fPt1Dg',\n    LATEST_VIDEO3: 'youtube.com/watch?v=HMOKYwja0ok',\n    GITHUB: 'https://github.com/chandlerkeyes',\n    KODEABLY: 'https://www.kodeably.com'\n}","import React from 'react';\nimport LinkButton from './link-button'\nimport { LINKS } from '../../contants';\nimport './styles.scss'\n\nconst CLASS_NAME = 'link-tree';\n\nfunction LinkTree() {\n    return (\n        <div className={CLASS_NAME}>\n            <div className={`${CLASS_NAME}-container`}>\n                <div className={`${CLASS_NAME}-image`} />\n                <p className=\"email\">chandler@kodeably.com</p>\n                <LinkButton link={LINKS.MOCK_INTERVIEW} text={`Sign up for a Mock Interview Today!`} />\n                <LinkButton link={LINKS.MENTORSHIP_SESSION} text={`Schedule a Mentorship Session`} />\n                <br/>\n                <LinkButton link={LINKS.KODEABLY} text={`kodeably.com`} />\n                <h3>Latest Videos</h3>\n                <div className=\"button-group-2\">\n                    <LinkButton link={LINKS.LATEST_VIDEO} text={`Bad Decisions I've Made as a Software Engineer`} />\n                    <LinkButton link={LINKS.LATEST_VIDEO2} text={`Common Interviewing Mistakes You Should Avoid`} />\n                    <LinkButton link={LINKS.LATEST_VIDEO3} text={`Why You Should Get a STEM Job`} />\n                </div>\n                <h3>YouTube</h3>\n                <div className=\"button-group-1\">\n                    <LinkButton link={LINKS.CHANDLER_KNOWS_BEST} text={'ChandlerKnowsBest'} />\n                    <LinkButton link={LINKS.CODING_WITH_CHANDLER} text={'CodingWithChandler'} />\n                </div>\n                <h3>Projects</h3>\n                <LinkButton link={LINKS.GITHUB} text={'GitHub'} />\n                <h3>Personal Blog</h3>\n                <LinkButton link={LINKS.BLOG} text={'ThinkWithColor'} />\n                <h3>Socials</h3>\n                <div className=\"button-group-2\">\n                    <LinkButton link={LINKS.INSTAGRAM} text={'Instagram'} />\n                    <LinkButton link={LINKS.TWITTER} text={'Twitter'} />\n                    <LinkButton link={LINKS.LINKEDIN} text={'LinkedIn'} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LinkTree;\n","import React from 'react';\nimport LinkTree from './components/link-tree'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LinkTree/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}